plugins {
  id 'java'
  id 'groovy'
  id 'application'
  id 'org.springframework.boot' version '3.5.0'
}

apply plugin: 'idea'
apply plugin: 'io.spring.dependency-management'

repositories {
  mavenCentral()
}

idea {
  module {
    downloadJavadoc = true
    downloadSources = true
  }
}

dependencies {
  implementation 'com.machinezoo.noexception:noexception:1.9.1'
  implementation 'one.util:streamex:0.8.3'
  implementation "org.apache.commons:commons-lang3:3.17.0"
  implementation "org.springframework.retry:spring-retry"
  implementation "org.springframework.boot:spring-boot-starter-web"
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-mail'
  implementation "org.springframework.boot:spring-boot-configuration-processor"
  implementation 'com.github.f4b6a3:ulid-creator:5.2.3'
  implementation 'com.github.ben-manes.caffeine:caffeine:3.1.8'
  implementation 'com.bucket4j:bucket4j-core:8.10.1'
  implementation "com.google.guava:guava:33.4.5-jre"
  implementation("commons-validator:commons-validator:1.9.0") {
    exclude module: "commons-logging"
  }

  testImplementation 'com.h2database:h2:2.3.232'
  testImplementation 'net.datafaker:datafaker:2.4.0'
  testImplementation 'com.tngtech.archunit:archunit:1.3.0'
  testImplementation "org.springframework.boot:spring-boot-test"
  testImplementation "org.springframework.boot:spring-boot-test-autoconfigure"
  testImplementation 'org.spockframework:spock-core:2.4-M4-groovy-4.0'
  testImplementation 'org.spockframework:spock-spring:2.4-M4-groovy-4.0'
  testImplementation 'org.apache.groovy:groovy:4.0.24'
  testImplementation 'org.apache.groovy:groovy-json:4.0.24'
  testImplementation 'com.google.guava:guava-testlib:33.4.5-jre'
  testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}


java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(24)
  }
}


test {
  def testDurations = [:]

  useJUnitPlatform()
  testLogging {
    events "passed", "failed"
  }
  afterTest { descriptor, result ->
    def name = "${descriptor.className} > ${descriptor.name}" as String
    def ms = result.endTime - result.startTime
    testDurations.put name, ms
  }
  doLast {
    println "🐌 Slowest tests (the slowest test(s) are likely the ones that load the Spring Context):"
    testDurations
      .sort { -it.value }
      .take(5)
      .each { println "${it.value}ms: $it.key" }
  }
}





